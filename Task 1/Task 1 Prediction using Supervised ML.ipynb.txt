{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Sparks Foundation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## By : Gamidi Sree Madhuchandra"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Science & Business Analytics Internship"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 1 : Prediction Using Supervised ML"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this task , we will be applying Linear Regression algorithm to predict the score obtained by student based on number of study hours ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Set : http://bit.ly/w-data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Q : What will be predicted score if a student studies for 9.25 hrs/ day? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Import all the required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "from pandas import *\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import *\n",
    "%matplotlib inline "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Importing the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=pd.read_csv(\"student_scores.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.2</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.5</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8.3</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.7</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7.7</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.9</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.5</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3.3</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.1</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.9</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.9</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6.1</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7.4</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2.7</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.8</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.8</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.9</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.8</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hours  Scores\n",
       "0     2.5      21\n",
       "1     5.1      47\n",
       "2     3.2      27\n",
       "3     8.5      75\n",
       "4     3.5      30\n",
       "5     1.5      20\n",
       "6     9.2      88\n",
       "7     5.5      60\n",
       "8     8.3      81\n",
       "9     2.7      25\n",
       "10    7.7      85\n",
       "11    5.9      62\n",
       "12    4.5      41\n",
       "13    3.3      42\n",
       "14    1.1      17\n",
       "15    8.9      95\n",
       "16    2.5      30\n",
       "17    1.9      24\n",
       "18    6.1      67\n",
       "19    7.4      69\n",
       "20    2.7      30\n",
       "21    4.8      54\n",
       "22    3.8      35\n",
       "23    6.9      76\n",
       "24    7.8      86"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Visualization in 1D-Histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'COUNT')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df1.Scores,bins=10,rwidth=0.8)\n",
    "plt.xlabel('Scores')\n",
    "plt.ylabel('COUNT')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df1.Hours,bins=10,rwidth=0.8)\n",
    "plt.xlabel('Hours')\n",
    "plt.ylabel('Count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Visualization in 2D-Scatter plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x218888316c8>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(7,4))\n",
    "plt.scatter(df1.Hours,df1.Scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Separate the dependent and Independent variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df1.iloc[:,:-1].values\n",
    "y = df1.iloc[:,-1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.5],\n",
       "       [5.1],\n",
       "       [3.2],\n",
       "       [8.5],\n",
       "       [3.5],\n",
       "       [1.5],\n",
       "       [9.2],\n",
       "       [5.5],\n",
       "       [8.3],\n",
       "       [2.7],\n",
       "       [7.7],\n",
       "       [5.9],\n",
       "       [4.5],\n",
       "       [3.3],\n",
       "       [1.1],\n",
       "       [8.9],\n",
       "       [2.5],\n",
       "       [1.9],\n",
       "       [6.1],\n",
       "       [7.4],\n",
       "       [2.7],\n",
       "       [4.8],\n",
       "       [3.8],\n",
       "       [6.9],\n",
       "       [7.8]])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([21, 47, 27, 75, 30, 20, 88, 60, 81, 25, 85, 62, 41, 42, 17, 95, 30,\n",
       "       24, 67, 69, 30, 54, 35, 76, 86], dtype=int64)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splitting the data into Training set and Test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2 , random_state = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training the required model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = LinearRegression()\n",
    "reg.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predicting the test set results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = reg.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hours</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.976191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Scores</th>\n",
       "      <td>0.976191</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Hours    Scores\n",
       "Hours   1.000000  0.976191\n",
       "Scores  0.976191  1.000000"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the Training set results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Scores')"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter(x_train,y_train,color = 'red')\n",
    "plot(x_train,reg.predict(x_train),color = 'blue')\n",
    "title('Hours vs Score')\n",
    "xlabel('Hours')\n",
    "ylabel('Scores')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the Test set results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Scores')"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter(x_test,y_test,color = 'red')\n",
    "plot(x_train,reg.predict(x_train),color = 'blue')\n",
    "title('Hours vs Score')\n",
    "xlabel('Hours')\n",
    "ylabel('Scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.952\n",
      "Model:                            OLS   Adj. R-squared:                  0.949\n",
      "Method:                 Least Squares   F-statistic:                     353.5\n",
      "Date:                Mon, 04 Jan 2021   Prob (F-statistic):           2.79e-13\n",
      "Time:                        19:56:17   Log-Likelihood:                -62.686\n",
      "No. Observations:                  20   AIC:                             129.4\n",
      "Df Residuals:                      18   BIC:                             131.4\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          2.0182      3.057      0.660      0.517      -4.404       8.441\n",
      "x1             9.9107      0.527     18.802      0.000       8.803      11.018\n",
      "==============================================================================\n",
      "Omnibus:                        4.659   Durbin-Watson:                   1.813\n",
      "Prob(Omnibus):                  0.097   Jarque-Bera (JB):                1.720\n",
      "Skew:                          -0.296   Prob(JB):                        0.423\n",
      "Kurtosis:                       1.691   Cond. No.                         13.9\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "x_train_Sm= sm.add_constant(x_train)\n",
    "\n",
    "ls=sm.OLS(y_train,x_train_Sm).fit()\n",
    "print(ls.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Accuracy obtained on the Test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9454906892105356\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "accuracy = r2_score(y_test,y_pred)\n",
    "print(accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.6474476121003665\n"
     ]
    }
   ],
   "source": [
    "print(np.sqrt(metrics.mean_squared_error(y_test,y_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predicting the score if the student studies for 9.25hrs a day."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([93.69173249])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.predict([[9.25]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Result "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### If a student studies for 9.25 hrs/day , then he is expected to  score 93.69..."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
